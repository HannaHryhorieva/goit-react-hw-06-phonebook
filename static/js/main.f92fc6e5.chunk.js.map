{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","e","target","value","className","preventDefault","onChange","type","pattern","title","required","Contacts","contacts","onDeleteContact","map","id","onClick","Filter","shortid","require","App","JSON","parse","window","localStorage","getItem","setContacts","filterV","setFilterV","useEffect","setItem","stringify","visibleContacts","normalizedFilter","toLowerCase","filter","contact","includes","getVisibleContacts","generate","contactFind","find","undefined","alert","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f92fc6e5.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit([name, number]);\n    setName('');\n    setNumber('');\n  };\n  const handleChange = e => {\n    const valueOption = e.target.name;\n    switch (valueOption) {\n      case 'name':\n        setName(e.target.value);\n        break;\n      case 'number':\n        setNumber(e.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n  return (\n    <form className=\"phonebookAdd\" onSubmit={handleSubmit}>\n      <label className=\"phonebookAdd-label\">\n        Name\n        <input\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          name=\"name\"\n          className=\"phonebookAdd-input\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className=\"phonebookAdd-label\">\n        Number\n        <input\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          name=\"number\"\n          className=\"phonebookAdd-input\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className=\"TodoEditor__button\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import PropTypes from 'prop-types';\nexport default function Contacts({ contacts, onDeleteContact }) {\n  return (\n    <ul className=\"contact-list\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"contacts-item\">\n          <span className=\"contacts-item-name\">{name}:</span>\n          <span className=\"contacts-item-name\">{number}</span>\n          <button\n            type=\"button\"\n            className=\"TodoList__btn\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\nContacts.propTypes = {\n  contacts: PropTypes.array,\n  onDeleteContact: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nexport default function Filter({ value, onChange }) {\n  return (\n    <label className=\"filter-label\">\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        className=\"filter-input\"\n      />\n    </label>\n  );\n}\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\n// import { Component } from 'react';\nimport './App.css';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nconst shortid = require('shortid');\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n  });\n  const [filterV, setFilterV] = useState('');\n\n  useEffect(() => {\n    return window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = ([name, number]) => {\n    const contact = {\n      id: shortid.generate(),\n      name: name,\n      number: number,\n    };\n    const contactFind = contacts.find(contact => contact.name === name);\n    if (contactFind !== undefined) {\n      return alert(`${name} is already in contacts.`);\n    }\n    setContacts(contacts => [contact, ...contacts]);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts =>\n      contacts.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const changeFilter = e => {\n    setFilterV(e.target.value);\n  };\n  const getVisibleContacts = () => {\n    const normalizedFilter = filterV.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  const visibleContacts = getVisibleContacts(contacts, filterV);\n  return (\n    <div>\n      <h2 className=\"phonebook-title\">Phonebook</h2>\n      <ContactForm onSubmit={addContact} />\n\n      <h3 className=\"phonebook-title\">Contacts</h3>\n      <Filter value={filterV} onChange={changeFilter} />\n      <ContactList contacts={visibleContacts} onDeleteContact={deleteContact} />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}